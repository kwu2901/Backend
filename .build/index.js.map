{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import Koa from 'koa';\nimport cors from '@koa/cors';\nimport Router from 'koa-router';\nimport bodyParser from 'koa-bodyparser';\nimport jwt from 'jsonwebtoken';\nimport mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst app = new Koa();\nconst router = new Router();\n\n// enable CORS for all routes\napp.use(cors());\napp.use(bodyParser());\napp.use(router.routes());\n\nconst mongo = process.env['mongo']\nmongoose.connect(mongo, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\n// Verify token middleware\nconst verifyToken = async (ctx: Koa.Context, next: Koa.Next) => {\n  // Get the token from the Authorization header\n  const authHeader = ctx.request.headers.authorization;\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    // If the token is missing, return an error\n    ctx.status = 401;\n    ctx.body = { message: 'Authentication failed' };\n    return;\n  }\n\n  try {\n    // Verify the JWT token\n    const decodedToken = jwt.verify(token, secret);\n    // Attach the decoded token to the context for later use\n    ctx.state.user = decodedToken;\n    // Call the next middleware function\n    await next();\n  } catch (err) {\n    // If the token is invalid, return an error\n    ctx.status = 401;\n    ctx.body = { message: 'Authentication failed' };\n  }\n};\n\n/////////////////Users/////////////////\nconst userSchema = new mongoose.Schema({\n  email: String,\n  username: String,\n  password: String,\n  staff: Boolean,\n});\n\nconst User = mongoose.model('User', userSchema);\n\nrouter.post('/addUser', async (ctx) => {\n  const { email, username, password, staff } = ctx.request.body;\n  const saltRounds = 10;\n\n  // Hash the password before saving to the database\n  const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n  const user = new User({\n    email,\n    username,\n    password: hashedPassword,\n    staff\n  });\n\n  try {\n    await user.save();\n    ctx.status = 201;\n    ctx.body = user;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nconst secret = 'my_secret_key';\n\nrouter.post('/Login', async (ctx) => {\n  const { email, password } = ctx.request.body;\n\n  try {\n    // Find the user with the provided email\n    const user = await User.findOne({ email });\n\n    if (!user) {\n      // If the user does not exist, return an error\n      ctx.status = 401;\n      ctx.body = { message: 'Authentication failed' };\n      return;\n    }\n\n    // Compare the password with the hashed password in the database\n    const isPasswordCorrect = await bcrypt.compare(password, user.password);\n\n    if (!isPasswordCorrect) {\n      // If the password is incorrect, return an error\n      ctx.status = 401;\n      ctx.body = { message: 'Authentication failed' };\n      return;\n    }\n    // Generate a JWT token for the user\n    const token = jwt.sign({ sub: user.id }, secret);\n\n    // Return the user and token in the response\n    ctx.body = {\n      token,\n      user: {\n        email: user.email,\n        username: user.username,\n        _id: user._id,\n        staff: user.staff,\n      },\n    };\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nconst port = process.env.PORT || 3000;\n\napp.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n\n/////////////////catList/////////////////\nconst catListSchema = new mongoose.Schema({\n  cat_name: String,\n  age: Number,\n  breed: String,\n  gender: String,\n  location: String,\n  describe: String,\n  image: String,\n});\n\nconst CatList = mongoose.model('CatList', catListSchema);\n\nrouter.get('/catList', async (ctx) => {\n  try {\n    const { location, gender, breed } = ctx.query;\n\n    let query = CatList.find();\n\n    // Apply filters based on query parameters\n    if (location) {\n      query = query.where('location').equals(location);\n    }\n    if (gender) {\n      query = query.where('gender').equals(gender);\n    }\n    if (breed) {\n      query = query.where('breed').equals(breed);\n    }\n\n    const catList = await query.limit(5).exec(); // Fetch first 5 cats matching the filters\n    ctx.body = catList;\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.get('/catList/:ids', async (ctx) => {\n  try {\n    const ids = ctx.params.ids.split(',');\n    const catList = await CatList.find({ _id: { $in: ids } });\n    ctx.body = catList;\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.post('/AddCat', verifyToken, async (ctx) => {\n  const { cat_name, age, breed, gender, location, describe, image } = ctx.request.body;\n\n  const cat = new CatList({\n    cat_name,\n    age,\n    breed,\n    gender,\n    location,\n    describe,\n    image,\n  });\n\n  try {\n    await cat.save();\n    ctx.status = 201;\n    ctx.body = cat;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.put('/updateCat/:id', verifyToken, async (ctx) => {\n  const { id } = ctx.params;\n  const { cat_name, age, breed, gender, location, describe, image } = ctx.request.body;\n\n  try {\n    const cat = await CatList.findByIdAndUpdate(id, {\n      cat_name,\n      age,\n      breed,\n      gender,\n      location,\n      describe,\n      image,\n    }, { new: true });\n\n    if (!cat) {\n      ctx.status = 404;\n      ctx.body = { message: 'Cat not found' };\n      return;\n    }\n\n    ctx.body = cat;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.delete('/delCat/:id', verifyToken, async (ctx) => {\n  const { id } = ctx.params;\n\n  try {\n    const cat = await CatList.findByIdAndDelete(id);\n\n    if (!cat) {\n      ctx.status = 404;\n      ctx.body = { message: 'Cat not found' };\n      return;\n    }\n\n    ctx.body = cat;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\n/////////////////messageList/////////////////\nconst messageSchema = new mongoose.Schema({\n  user_id: String,\n  title: String,\n  content: String,\n  read: Boolean,\n});\n\nconst Message = mongoose.model('Message', messageSchema);\n\nrouter.post('/addMessages', verifyToken, async (ctx) => {\n  const { user_id, title, content, read } = ctx.request.body;\n\n  const message = new Message({\n    user_id,\n    title,\n    content,\n    read,\n  });\n\n  try {\n    await message.save();\n    ctx.status = 201;\n    ctx.body = message;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.get('/messages', verifyToken, async (ctx) => {\n  try {\n    const messages = await Message.find().limit(10);\n    ctx.body = messages;\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.put('/updateMessages/:id', verifyToken, async (ctx) => {\n  const { id } = ctx.params;\n  const { read } = ctx.request.body;\n\n  try {\n    const message = await Message.findByIdAndUpdate(id, {\n      read,\n    });\n\n    if (!message) {\n      ctx.status = 404;\n      ctx.body = { message: 'Message not found' };\n    } else {\n      ctx.body = message;\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.delete('/delMessages/:id', verifyToken, async (ctx) => {\n  const { id } = ctx.params;\n\n  try {\n    const message = await Message.findByIdAndDelete(id);\n\n    if (!message) {\n      ctx.status = 404;\n      ctx.body = { message: 'Message not found' };\n    } else {\n      ctx.body = { message: 'Message deleted successfully' };\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\n/////////////////staffCode/////////////////\nconst staffCodeSchema = new mongoose.Schema({\n  staff_id: String,\n});\n\nconst StaffCode = mongoose.model('StaffCode', staffCodeSchema);\n\nrouter.get('/staffCode/:id', async (ctx) => {\n  const { id } = ctx.params;\n\n  try {\n    const staffCode = await StaffCode.findById(id);\n\n    if (!staffCode) {\n      ctx.status = 404;\n      ctx.body = { message: 'StaffCode not found' };\n    } else {\n      ctx.body = staffCode;\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.post('/addStaffCode', async (ctx) => {\n  const { staff_id } = ctx.request.body;\n\n  const staffCode = new StaffCode({\n    staff_id,\n  });\n\n  try {\n    await staffCode.save();\n    ctx.status = 201;\n    ctx.body = staffCode;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\n/////////////////favourites/////////////////\nconst favouriteSchema = new mongoose.Schema({\n  user_id: String,\n  cat_id: String,\n});\n\nconst Favourite = mongoose.model('Favourite', favouriteSchema);\n\nrouter.post('/addFavourites', verifyToken, async (ctx) => {\n  const { user_id, cat_id } = ctx.request.body;\n\n  const favourite = new Favourite({\n    user_id,\n    cat_id,\n  });\n\n  try {\n    await favourite.save();\n    ctx.status = 201;\n    ctx.body = favourite;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.get('/favourites/:user_id', verifyToken, async (ctx) => {\n  const { user_id } = ctx.params;\n\n  try {\n    const favourites = await Favourite.find({ user_id });\n\n    ctx.body = favourites;\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.delete('/delFavourites/:user_id/:cat_id', verifyToken, async (ctx) => {\n  const { user_id, cat_id } = ctx.params;\n\n  try {\n    const favourite = await Favourite.findOneAndDelete({ user_id, cat_id });\n\n    if (!favourite) {\n      ctx.status = 404;\n      ctx.body = { message: 'Favourite not found' };\n    } else {\n      ctx.body = { message: 'Favourite deleted successfully' };\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n"],
  "mappings": "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",
  "names": ["Koa", "Router", "cors", "bodyParser", "mongoose", "jwt", "bcrypt"]
}
