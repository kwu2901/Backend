{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["import Koa from 'koa';\nimport cors from '@koa/cors';\nimport Router from 'koa-router';\nimport bodyParser from 'koa-bodyparser';\n\nconst app = new Koa();\nconst router = new Router();\n\n// enable CORS for all routes\napp.use(cors());\n\napp.use(bodyParser());\napp.use(router.routes());\n\nimport mongoose from 'mongoose';\n\nmongoose.connect('mongodb+srv://root:root@cluster.zciveax.mongodb.net/cat_db', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\n/////////////////Users/////////////////\nconst userSchema = new mongoose.Schema({\n  name: String,\n  pw: String,\n  staff: Boolean,\n});\n\nconst User = mongoose.model('User', userSchema);\n\nrouter.post('/addUser', async (ctx) => {\n  const { name, pw, staff } = ctx.request.body;\n\n  const user = new User({\n    name,\n    pw,\n    staff\n  });\n\n  try {\n    await user.save();\n    ctx.status = 201;\n    ctx.body = user;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nimport jwt from 'jsonwebtoken';\n\nconst secret = 'my_secret_key';\n\nrouter.post('/login', async (ctx) => {\n  const { name, pw } = ctx.request.body;\n\n  const user = await User.findOne({ name, pw });\n\n  if (!user) {\n    ctx.status = 401;\n    ctx.body = { message: 'Authentication failed' };\n    return;\n  }\n\n  const token = jwt.sign({ sub: user.id }, secret);\n\n  ctx.body = { token };\n});\n\nconst port = process.env.PORT || 3000;\n\napp.listen(port, () => {\n  console.log(`Server started on port ${port}`);\n});\n\n/////////////////catList/////////////////\nconst catListSchema = new mongoose.Schema({\n  cat_name: String,\n  age: Number,\n  breed: String,\n  gender: String,\n  location: String,\n  describe: String,\n  image: String,\n});\n\nconst CatList = mongoose.model('CatList', catListSchema);\n\nrouter.get('/catList', async (ctx) => {\n  try {\n    const catList = await CatList.find().limit(50); // Fetch first 5 cats\n    ctx.body = catList;\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.post('/AddCat', async (ctx) => {\n  const { cat_name, age, breed, gender, location, describe, image } = ctx.request.body;\n\n  const cat = new CatList({\n    cat_name,\n    age,\n    breed,\n    gender,\n    location,\n    describe,\n    image,\n  });\n\n  try {\n    await cat.save();\n    ctx.status = 201;\n    ctx.body = cat;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.put('/updateCat/:id', async (ctx) => {\n  const { id } = ctx.params;\n  const { cat_name, age, breed, gender, location, describe, image } = ctx.request.body;\n\n  try {\n    const cat = await CatList.findByIdAndUpdate(id, {\n      cat_name,\n      age,\n      breed,\n      gender,\n      location,\n      describe,\n      image,\n    }, { new: true });\n\n    if (!cat) {\n      ctx.status = 404;\n      ctx.body = { message: 'Cat not found' };\n      return;\n    }\n\n    ctx.body = cat;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.delete('/delCat/:id', async (ctx) => {\n  const { id } = ctx.params;\n\n  try {\n    const cat = await CatList.findByIdAndDelete(id);\n\n    if (!cat) {\n      ctx.status = 404;\n      ctx.body = { message: 'Cat not found' };\n      return;\n    }\n\n    ctx.body = cat;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\n/////////////////messageList/////////////////\nconst messageSchema = new mongoose.Schema({\n  user_id: String,\n  content: String,\n  read: Boolean,\n});\n\nconst Message = mongoose.model('Message', messageSchema);\n\nrouter.post('/addMessages', async (ctx) => {\n  const { user_id, content, read } = ctx.request.body;\n\n  const message = new Message({\n    user_id,\n    content,\n    read,\n  });\n\n  try {\n    await message.save();\n    ctx.status = 201;\n    ctx.body = message;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.get('/messages', async (ctx) => {\n  try {\n    const messages = await Message.find().limit(10);\n    ctx.body = messages;\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.put('/updateMessages/:id', async (ctx) => {\n  const { id } = ctx.params;\n  const { user_id, content, read } = ctx.request.body;\n\n  try {\n    const message = await Message.findByIdAndUpdate(id, {\n      user_id,\n      content,\n      read,\n    });\n\n    if (!message) {\n      ctx.status = 404;\n      ctx.body = { message: 'Message not found' };\n    } else {\n      ctx.body = message;\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.delete('/delMessages/:id', async (ctx) => {\n  const { id } = ctx.params;\n\n  try {\n    const message = await Message.findByIdAndDelete(id);\n\n    if (!message) {\n      ctx.status = 404;\n      ctx.body = { message: 'Message not found' };\n    } else {\n      ctx.body = { message: 'Message deleted successfully' };\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\n/////////////////staffCode/////////////////\nconst staffCodeSchema = new mongoose.Schema({\n  staff_id: String,\n});\n\nconst StaffCode = mongoose.model('StaffCode', staffCodeSchema);\n\nrouter.get('/staffCode/:id', async (ctx) => {\n  const { id } = ctx.params;\n\n  try {\n    const staffCode = await StaffCode.findById(id);\n\n    if (!staffCode) {\n      ctx.status = 404;\n      ctx.body = { message: 'StaffCode not found' };\n    } else {\n      ctx.body = staffCode;\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.post('/AddStaffCode', async (ctx) => {\n  const { staff_id } = ctx.request.body;\n\n  const staffCode = new StaffCode({\n    staff_id,\n  });\n\n  try {\n    await staffCode.save();\n    ctx.status = 201;\n    ctx.body = staffCode;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\n/////////////////favourites/////////////////\nconst favouriteSchema = new mongoose.Schema({\n  user_id: String,\n  cat_id: String,\n});\n\nconst Favourite = mongoose.model('Favourite', favouriteSchema);\n\nrouter.post('/addFavourites', async (ctx) => {\n  const { user_id, cat_id } = ctx.request.body;\n\n  const favourite = new Favourite({\n    user_id,\n    cat_id,\n  });\n\n  try {\n    await favourite.save();\n    ctx.status = 201;\n    ctx.body = favourite;\n  } catch (err) {\n    ctx.status = 400;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.get('/favourites/:user_id', async (ctx) => {\n  const { user_id } = ctx.params;\n\n  try {\n    const favourites = await Favourite.find({ user_id });\n\n    ctx.body = favourites;\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n\nrouter.delete('/delFavourites/:user_id/:cat_id', async (ctx) => {\n  const { user_id, cat_id } = ctx.params;\n\n  try {\n    const favourite = await Favourite.findOneAndDelete({ user_id, cat_id });\n\n    if (!favourite) {\n      ctx.status = 404;\n      ctx.body = { message: 'Favourite not found' };\n    } else {\n      ctx.body = { message: 'Favourite deleted successfully' };\n    }\n  } catch (err) {\n    ctx.status = 500;\n    ctx.body = { message: err.message };\n  }\n});\n"],
  "mappings": "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",
  "names": ["Koa", "Router", "cors", "bodyParser", "mongoose", "jwt"]
}
